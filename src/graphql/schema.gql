# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptFriendInviteInput {
  receiverId: ID!
  token: String!
}

type ChatMessage {
  chatId: String!
  id: ID!
  message: String!
  read: Boolean!
  senderId: String!
  status: String!
  timestamp: DateTime!
}

input CreateFriendInviteInput {
  inviterId: ID!
  targetUsername: String
  ttlHours: Int! = 24
}

input CreateLevelInput {
  color: String!
  experienceRequired: Int!
  name: String!
  number: Int!
}

input CreateUserInput {
  birthday: String!
  email: String!
  lastname: String!
  levelId: Int!
  name: String!
  nickname: String
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Friend {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  receiver: User
  receiverId: ID!
  requester: User
  requesterId: ID!
  status: String!
  updatedAt: DateTime!
}

enum FriendStatus {
  ACCEPTED
  BLOCKED
  DECLINED
  PENDING
}

type Level {
  color: String!
  createdAt: DateTime!
  experienceRequired: Int!
  id: ID!
  name: String!
  number: Int!
  updatedAt: DateTime!
}

type Mutation {
  acceptFriendInvite(input: AcceptFriendInviteInput!): Friend!
  createFriendInvite(input: CreateFriendInviteInput!): String!
  createLevel(data: CreateLevelInput!): Level!
  createUser(data: CreateUserInput!): User!
  deleteLevel(id: Int!): Level!
  deleteUser(id: ID!): User!
  markMessageRead(chatId: ID!, messageId: ID!): ChatMessage!
  removeFriend(id: ID!): Boolean!
  requestFriendByUsername(input: RequestFriendByUsernameInput!): Friend!
  sendMessage(input: SendMessageInput!): ChatMessage!
  toggleFriendActive(input: ToggleFriendActiveInput!): Friend!
  updateFriendStatus(input: UpdateFriendStatusInput!): Friend!
}

type Query {
  level(id: Int!): Level!
  levels: [Level!]!
  messages(chatId: ID!): [ChatMessage!]!
  myFriends(userId: ID!): [Friend!]!
  users: [User!]!
}

input RequestFriendByUsernameInput {
  requesterId: ID!
  username: String!
}

input SendMessageInput {
  chatId: ID!
  message: String!
  senderId: ID!
}

type Subscription {
  messageAdded(chatId: ID!): ChatMessage!
  messageUpdated(chatId: ID!): ChatMessage!
}

input ToggleFriendActiveInput {
  active: Boolean!
  id: ID!
}

input UpdateFriendStatusInput {
  id: ID!
  status: FriendStatus!
}

type User {
  birthday: DateTime!
  createdAt: DateTime!
  email: String!
  id: ID!
  lastname: String!
  levelId: Int!
  name: String!
  nickname: String!
  username: String!
}