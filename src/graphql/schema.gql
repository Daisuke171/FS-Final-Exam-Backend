# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptFriendInviteInput {
  receiverId: ID!
  token: String!
}

input AnswerCallInput {
  callId: ID!
  calleeId: ID!
  sdpAnswer: String!
}

type AuthResponse {
  accessToken: String!
  user: User!
}

type Call {
  calleeId: ID!
  callerId: ID!
  createdAt: DateTime!
  id: ID!
  sdpAnswer: String
  sdpOffer: String
  status: CallStatus!
  updatedAt: DateTime!
}

enum CallStatus {
  ACCEPTED
  ENDED
  REJECTED
  RINGING
}

type ChatMessage {
  chatId: ID!
  id: ID!
  message: String!
  read: Boolean!
  senderId: ID!
  status: String!
  timestamp: DateTime!
}

input CreateFriendInviteInput {
  inviterId: String!
  targetUsername: String
  ttlHours: Int
}

input CreateGameInput {
  category: String!
  description: String!
  duration: String!
  gameLogo: String!
  maxPlayers: Int!
  minPlayers: Int!
  name: String!
  rules: String!
  score: Int!
}

input CreateLevelInput {
  atomicNumber: Int!
  chemicalSymbol: String!
  color: String!
  experienceRequired: Int!
  name: String!
}

type CreateManyResult {
  count: Int!
}

input CreateSkinInput {
  img: String!
  level: Int!
  name: String!
  userIds: [String!]
  value: Float!
}

input CreateUserInput {
  birthday: String!
  email: String!
  lastname: String!
  levelId: Int!
  name: String!
  nickname: String
  password: String!
  username: String!
}

input CreateUserSkinInput {
  equipped: Boolean
  skinId: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Friend {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  receiver: User
  receiverId: ID!
  requester: User
  requesterId: ID!
  status: String!
  updatedAt: DateTime!
}

enum FriendStatus {
  ACCEPTED
  BLOCKED
  DECLINED
  PENDING
}

type Game {
  category: String!
  createdAt: DateTime!
  description: String
  duration: String!
  favorite: [GameFavorite]!
  gameLogo: String
  history: [GameHistory]!
  id: ID!
  maxPlayers: Int!
  minPlayers: Int!
  name: String!
  rules: String
  score: Int!
  updatedAt: DateTime!
}

type GameFavorite {
  createdAt: DateTime!
  game: Game
  gameId: ID!
  id: ID!
  updatedAt: DateTime!
  user: User
  userId: ID!
}

type GameHistory {
  createdAt: DateTime!
  duration: Int!
  game: Game
  gameId: ID!
  id: ID!
  score: Int!
  state: String!
  totalDamage: Int!
  updatedAt: DateTime!
  user: User
  userId: ID!
}

type Leaderboard {
  entries: [LeaderboardEntry!]!
  gameId: ID!
  gameName: String!
  generatedAt: DateTime!
}

type LeaderboardEntry {
  bestScore: Int!
  level: Int!
  name: String
  nickname: String!
  rank: Int!
  totalGames: Int!
  totalScore: Int!
  userId: ID!
  wins: Int!
}

type Level {
  atomicNumber: Int!
  chemicalSymbol: String!
  color: String!
  createdAt: DateTime!
  experienceRequired: Int!
  id: Int!
  name: String!
  updatedAt: DateTime!
  users: [User!]
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  acceptFriendInvite(input: AcceptFriendInviteInput!): Friend!
  answerCall(input: AnswerCallInput!): Call!
  assignSkin(data: CreateUserSkinInput!): UserSkin!
  createFriendInvite(input: CreateFriendInviteInput!): String!
  createGame(input: CreateGameInput!): Game!
  createLevel(data: CreateLevelInput!): Level!
  createManyLevels(data: [CreateLevelInput!]!): CreateManyResult!
  createSkin(data: CreateSkinInput!): Skin!
  createUser(data: CreateUserInput!): User!
  deleteGame(id: ID!): Game!
  deleteLevel(id: Int!): Level!
  deleteSkin(id: ID!): Skin!
  deleteUser(id: ID!): User!
  endCall(callId: ID!): Call!
  login(loginInput: LoginInput!): AuthResponse!
  markMessageRead(chatId: ID!, messageId: ID!): ChatMessage!
  register(registerInput: RegisterInput!): User!
  rejectCall(callId: ID!): Call!
  removeFriend(id: ID!): Boolean!
  requestFriendByUsername(input: RequestFriendByUsernameInput!): Friend!
  saveGameResult(input: SaveGameResultInput!): GameHistory!
  sendMessage(input: SendMessageInput!): ChatMessage!
  startCall(calleeId: ID!, sdpOffer: String!): Call!
  toggleFavorite(input: ToggleFavoriteInput!): Boolean!
  toggleFriendActive(input: ToggleFriendActiveInput!): Friend!
  updateFriendStatus(input: UpdateFriendStatusInput!): Friend!
  updateGame(id: ID!, input: UpdateGameInput!): Game!
}

type Query {
  game(id: ID!): Game!
  games: [Game!]!
  globalLeaderboard: Leaderboard!
  leaderboard(gameId: ID!): Leaderboard!
  level(id: Int!): Level!
  levels: [Level!]!
  me(userId: ID!): User!
  messages(chatId: ID!): [ChatMessage!]!
  myActiveCalls: [Call!]!
  myFriends(userId: ID!): [Friend!]!
  skin(id: ID!): Skin!
  skins: [Skin!]!
  userFavorites(userId: ID!): [GameFavorite!]!
  userGames(gameId: ID, userId: ID!): [GameHistory!]!
  userSkins: [UserSkin!]!
  userStats(gameId: ID, userId: ID!): UserStats!
  users: [User!]!
}

input RegisterInput {
  birthday: String!
  email: String!
  lastname: String!
  name: String!
  nickname: String!
  password: String!
  username: String!
}

input RequestFriendByUsernameInput {
  requesterId: ID!
  username: String!
}

input SaveGameResultInput {
  duration: Int!
  gameId: ID!
  score: Int!
  state: String!
  totalDamage: Int!
  userId: ID!
}

input SendMessageInput {
  chatId: ID!
  message: String!
  senderId: ID!
}

type Skin {
  createdAt: DateTime!
  id: ID!
  img: String!
  level: Int!
  name: String!
  updatedAt: DateTime!
  users: [User]
  value: Float!
}

type Subscription {
  callRinging(calleeId: ID!): Call!
  messageAdded(chatId: ID!): ChatMessage!
  messageUpdated(chatId: ID!): ChatMessage!
}

input ToggleFavoriteInput {
  gameId: ID!
  userId: ID!
}

input ToggleFriendActiveInput {
  active: Boolean!
  id: ID!
}

input UpdateFriendStatusInput {
  id: ID!
  status: FriendStatus!
}

input UpdateGameInput {
  category: String
  description: String
  duration: String
  gameLogo: String
  maxPlayers: Int
  minPlayers: Int
  name: String
  rules: String
  score: Int
}

type User {
  birthday: DateTime!
  chats: [String!]!
  coins: Float!
  createdAt: DateTime!
  email: String!
  experience: Float!
  experienceToNextLevel: Int!
  friends: [String!]!
  gameFavorites: [String!]!
  gameHistory: [String!]!
  id: ID!
  lastname: String!
  level: Level!
  levelId: Int!
  levelProgress: Float!
  name: String!
  nextLevelExperience: Int
  nickname: String
  notifications: [String!]!
  skins: [String!]
  totalScore: Int!
  updatedAt: DateTime!
  username: String!
}

type UserSkin {
  acquiredAt: DateTime!
  equipped: Boolean!
  id: ID!
  skin: Skin
  skinId: String!
  user: User
  userId: String!
}

type UserStats {
  averageScore: Int!
  avgPerDay: Float!
  bestStreak: Int!
  highScore: Int!
  totalDraws: Int!
  totalGames: Int!
  totalLosses: Int!
  totalTime: String!
  totalWins: Int!
  winRate: Float!
}