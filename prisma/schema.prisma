generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  name                  String
  lastname              String
  email                 String         @unique
  username              String         @unique
  password              String?
  birthday              DateTime
  nickname              String?        @unique @default("guest")
  experience            Int            @default(0)
  coins                 Float          @default(0)
  levelId               Int            @map("level_id")
  level                 Level          @relation(fields: [levelId], references: [id])
  skins                 UserSkin[]
  gameHistories         GameHistory[]
  gameFavorites         GameFavorite[]
  notifications         Notification[]
  // Relaciones de amistad
  friendsRequested      Friend[]       @relation("friendsRequested") // envié la solicitud
  friendsReceived       Friend[]       @relation("friendsReceived") // recibí la solicitud
  friendInvitesSent     FriendInvite[] @relation("FriendInvitesSent") // yo generé el link
  friendInvitesTargeted FriendInvite[] @relation("FriendInvitesTarget") // link dirigido a mí
  friendInvitesUsed     FriendInvite[] @relation("FriendInvitesUsed") // yo usé el link
  chats                 Chat[]
  // Relaciones de llamadas
  callsMade             Call[]         @relation("CallsAsCaller")
  callsReceived         Call[]         @relation("CallsAsCallee")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  // Relacion de RefreshToken
  refreshTokens         RefreshToken[]
  googleId              String?        @unique

  @@map("users")
}

model Skin {
  id        String     @id @default(uuid())
  name      String     @unique
  img       String
  level     Int
  value     Float
  users     UserSkin[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("skins")
}

model UserSkin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  skin      Skin     @relation(fields: [skinId], references: [id])
  skinId    String
  active    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_skins")
}

model Level {
  id                 Int      @id @default(autoincrement())
  atomicNumber       Int      @unique @map("atomic_number")
  name               String
  color              String
  chemicalSymbol     String   @map("chemical_symbol")
  experienceRequired Int      @map("experience_required")
  users              User[]
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("levels")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Friend {
  id          String       @id @default(uuid())
  requesterId String
  receiverId  String
  requester   User         @relation("friendsRequested", fields: [requesterId], references: [id])
  receiver    User         @relation("friendsReceived", fields: [receiverId], references: [id])
  status      FriendStatus @default(PENDING)
  active      Boolean      @default(false)
  chats       Chat[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([requesterId, receiverId])
  @@index([requesterId])
  @@index([receiverId])
  @@index([status])
  @@map("friends")
}

model FriendInvite {
  id        String @id @default(uuid())
  inviterId String
  inviter   User   @relation("FriendInvitesSent", fields: [inviterId], references: [id])

  tokenHash    String    @unique
  targetUserId String?
  targetUser   User?     @relation("FriendInvitesTarget", fields: [targetUserId], references: [id])
  expiresAt    DateTime
  usedAt       DateTime?
  usedById     String?
  usedBy       User?     @relation("FriendInvitesUsed", fields: [usedById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([inviterId])
  @@index([targetUserId])
  @@index([expiresAt])
  @@map("friend_invites")
}

model Game {
  id          String         @id @default(uuid())
  name        String         @unique
  description String
  rules       String
  gameLogo    String         @map("game_logo")
  category    String
  score       Int
  duration    String         @default("00:00:00")
  maxPlayers  Int            @map("max_players")
  minPlayers  Int            @map("min_players")
  history     GameHistory[]
  favorite    GameFavorite[]
  rooms       Room[]
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@map("games")
}

model GameHistory {
  id          String   @id @default(uuid())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      String   @map("game_id")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  duration    Int
  state       String
  score       Int
  totalDamage Int?     @default(0) @map("total_damage")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("game_history")
}

model GameFavorite {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String   @map("game_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("game_favorites")
}

model Chat {
  id        String        @id @default(uuid())
  userId    String        @map("user_id")
  friendId  String        @map("friend_id")
  user      User          @relation(fields: [userId], references: [id])
  friend    Friend        @relation(fields: [friendId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@unique([friendId])
  @@map("chats")
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String   @map("chat_id")
  senderId  String   @map("sender_id")
  message   String
  status    String   @default("sended")
  read      Boolean  @default(false)
  timestamp DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chat_messages")
}

model Room {
  id             String   @id @default(uuid())
  name           String
  description    String
  game           Game     @relation(fields: [gameId], references: [id])
  gameId         String   @map("game_id")
  type           String
  status         String   @default("open")
  maxPlayers     Int      @map("max_players")
  currentPlayers Int      @default(0) @map("current_players")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("rooms")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String
  entity    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model Color {
  id        String   @id @default(uuid())
  name      String
  hex       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("colors")
}

enum CallStatus {
  RINGING
  ACCEPTED
  REJECTED
  ENDED
}

model Call {
  id       String     @id @default(uuid())
  callerId String     @map("caller_id")
  calleeId String     @map("callee_id")
  status   CallStatus @default(RINGING)

  // SDP
  sdpOffer  String? @map("sdp_offer")
  sdpAnswer String? @map("sdp_answer")

  // timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  caller User @relation("CallsAsCaller", fields: [callerId], references: [id])
  callee User @relation("CallsAsCallee", fields: [calleeId], references: [id])

  @@index([callerId])
  @@index([calleeId])
  @@index([status])
  @@map("calls")
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  issuedAt  DateTime  @default(now())
  expiresAt DateTime?
  revoked   Boolean   @default(false)
}
