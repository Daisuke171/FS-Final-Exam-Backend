// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  lastname   String
  email      String      @unique
  username   String      @unique
  password   String
  birthday   DateTime
  nickname   String?     @unique @default("guest")
  experience Int         @default(0)
  coins      Float       @default(0)
  level      Level       @relation(fields: [levelId], references: [Id])
  levelId    Int
  skins      UserSkins[]
  friends    Friend[]
  gameHistory GameHistory[]
  gameFavorites GameFavorite[]
  notifications notification[]
  chats      Chat[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Skin {
  Id    String      @id @default(uuid())
  name      String
  img       String
  level     Int
  value     Float
  users     UserSkins[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserSkins {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skin      Skin     @relation(fields: [skinId], references: [Id])
  skinId    String
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Level {
  Id                 Int      @id @default(autoincrement())
  number             Int
  name               String
  color              String
  experienceRequired Int
  users              User[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Friend {
  Id       String   @id @default(uuid())
  status   String   @default("pending")
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat[]
  active   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  Id      String   @id @default(uuid())
  name        String
  description String
  rules       String
  gameLogo    String
  category    String
  score       Int
  duration    Int
  maxPlayers  Int
  minPlayers  Int
  history     GameHistory[]
  favorite    GameFavorite[]
  rooms       room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GameHistory {
  id        String   @id @default(uuid())
  game    Game     @relation(fields: [gameId], references: [Id])
  gameId    String 
  user     User     @relation(fields: [userId], references: [id])
  userId    String
  duration  Int
  state     String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameFavorite {
  id        String   @id @default(uuid())
  game     Game     @relation(fields: [gameId], references: [Id])
  gameId    String
  user     User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  Id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  friend Friend  @relation(fields: [friendId], references: [Id])
  friendId String
  messages chatMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model chatMessage {
  Id       String   @id @default(uuid())
  chat     Chat     @relation(fields: [chatId], references: [Id])
  chatId    String
  senderId  String
  message   String
  status    String   @default("sended")
  read      Boolean  @default(false)
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model room {
  Id             String   @id @default(uuid())
  name           String
  description    String
  game         Game     @relation(fields: [gameId], references: [Id])
  gameId         String
  type           String
  status         String   @default("open")
  maxPlayers     Int
  currentPlayers Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model notification {
  Id String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId         String
  type           String
  entity         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model colors {
  Id   String   @id @default(uuid())
  name      String
  hex       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
